# File: gemini_pro.py (ƒê√£ s·ª≠a A-Z)

from datetime import datetime, timedelta
import json
from core.bot_sys import *
from zlapi.models import *
import requests
import threading
import re
import os
import logging

# UID Zalo ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y (ƒë∆∞·ª£c ƒë·∫∑t tr·ª±c ti·∫øp)
ALLOWED_ZALO_UID = "552782355350996128"

# L·∫•y GEMINI_API_KEY t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

if not GEMINI_API_KEY:
    logging.error("L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng 'GEMINI_API_KEY' ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")

last_message_times = {}
conversation_states = {}

def get_user_name_by_id(bot, author_id):
    try:
        user_info = bot.fetchUserInfo(author_id).changed_profiles[author_id]
        return user_info.zaloName or user_info.displayName
    except Exception:
        return "b·∫°n b√≠ ·∫©n"

def handle_chat_on(bot, thread_id):
    settings = read_settings(bot.uid)
    if "chat" not in settings:
        settings["chat"] = {}
    settings["chat"][thread_id] = True
    write_settings(bot.uid, settings)
    return "Ok, b·∫≠t chat r·ªìi nha, gi·ªù th√¨ qu·∫©y tung b·ª´ng v·ªõi Astra ƒë√¢y! üòé"

def handle_chat_off(bot, thread_id):
    settings = read_settings(bot.uid)
    if "chat" in settings and thread_id in settings["chat"]:
        settings["chat"][thread_id] = False
        write_settings(bot.uid, settings)
        return "T·∫Øt chat r·ªìi, bu·ªìn thi·ªát ch·ªõ, nh∆∞ng c·∫ßn Astra th√¨ c·ª© r√©o nh√©! üòå"
    return "Nh√≥m n√†y ch∆∞a b·∫≠t chat m√†, t·∫Øt g√¨ n·ªïi ƒë·∫°i ca! üòÇ"

def handle_chat_command(message, message_object, thread_id, thread_type, author_id, client):
    settings = read_settings(client.uid)
    # ============== S·ª¨A L·ªñI 1: THAY "chat" B·∫∞NG "as" ==============
    user_message = message.replace(f"{client.prefix}as ", "", 1).strip()
    current_time = datetime.now()

    # ============== S·ª¨A L·ªñI 2: TH√äM MENU KHI G√ï L·ªÜNH R·ªñNG ==============
    if not user_message and message.strip() == f"{client.prefix}as":
        menu_text = (
            "====== MENU ASTRA AI ======\n"
            f"‚ú® {client.prefix}as on -> B·∫≠t chat AI\n"
            f"‚ú® {client.prefix}as off -> T·∫Øt chat AI\n"
            f"‚ú® {client.prefix}as [c√¢u h·ªèi] -> H·ªèi AI"
        )
        client.replyMessage(Message(text=menu_text), thread_id=thread_id, thread_type=thread_type, replyMsg=message_object)
        return

    # KI·ªÇM TRA CH·ªà UID ƒê∆Ø·ª¢C PH√âP
    if str(author_id) != ALLOWED_ZALO_UID:
        response = "Xin l·ªói, ch·ª©c nƒÉng chat AI n√†y ch·ªâ d√†nh cho ch·ªß bot."
        client.replyMessage(Message(text=response), thread_id=thread_id, thread_type=thread_type, replyMsg=message_object)
        return

    # KI·ªÇM TRA L·ªÜNH ON/OFF (v·∫´n gi·ªØ quy·ªÅn admin)
    if user_message.lower() == "on":
        if not is_admin(client, author_id):
            response = "‚ùåB·∫°n kh√¥ng ph·∫£i admin bot!"
        else:
            response = handle_chat_on(client, thread_id)
        client.replyMessage(Message(text=response), thread_id=thread_id, thread_type=thread_type, replyMsg=message_object)
        return

    elif user_message.lower() == "off":
        if not is_admin(client, author_id):
            response = "‚ùåB·∫°n kh√¥ng ph·∫£i admin bot!"
        else:
            response = handle_chat_off(client, thread_id)
        client.replyMessage(Message(text=response), thread_id=thread_id, thread_type=thread_type, replyMsg=message_object)
        return

    if not settings.get("chat", {}).get(thread_id, False):
        return
    
    if not GEMINI_API_KEY:
        client.replyMessage(
            Message(text=f"L·ªói c·∫•u h√¨nh: Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng 'GEMINI_API_KEY'."),
            thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
        )
        return

    # Ki·ªÉm tra spam
    if author_id in last_message_times:
        time_diff = current_time - last_message_times[author_id]
        if time_diff < timedelta(seconds=20):
            user_name = get_user_name_by_id(client, author_id)
            client.replyMessage(
                Message(text=f"·ªêi {user_name}, t·ª´ t·ª´ th√¥i nha! Astra kh√¥ng ph·∫£i si√™u m√°y t√≠nh ƒë√¢u üòÖ\n\n[Ask by: {user_name}]"),
                thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
            )
            return

    last_message_times[author_id] = current_time
    threading.Thread(target=handle_gemini_pro, args=(user_message, message_object, thread_id, thread_type, author_id, client)).start()

def handle_gemini_pro(user_message, message_object, thread_id, thread_type, author_id, client):
    if not GEMINI_API_KEY:
        logging.error("L·ªói: GEMINI_API_KEY kh√¥ng c√≥ s·∫µn trong handle_gemini_pro.")
        client.replyMessage(
            Message(text=f"L·ªói h·ªá th·ªëng: Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng b√°o cho ch·ªß bot."),
            thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
        )
        return

    asker_name = get_user_name_by_id(client, author_id)
    conversation_state = conversation_states.get(thread_id, {'history': []})
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    prompt = f"B·∫°n l√† Astra, m·ªôt c√¥ g√°i AI vui t√≠nh, d·ªÖ th∆∞∆°ng v√† lu√¥n tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng t√≠ch c·ª±c, lu√¥n truy·ªÅn c·∫£m h·ª©ng cho m·ªçi ng∆∞·ªùi. Ch·ªß nh√¢n c·ªßa b·∫°n l√† L A K. Th·ªùi gian hi·ªán t·∫°i l√† {current_time}.\n"
    prompt += "B·∫°n lu√¥n c·ªë g·∫Øng hi·ªÉu c√°c t·ª´ vi·∫øt t·∫Øt ho·∫∑c ng√¥n ng·ªØ teen c·ªßa ng∆∞·ªùi d√πng (v√≠ d·ª•: 'k' nghƒ©a l√† 'kh√¥ng', 'hok' c≈©ng l√† 'kh√¥ng', 'ntn' nghƒ©a l√† 'nh∆∞ th·∫ø n√†o', 'dc' nghƒ©a l√† 'ƒë∆∞·ª£c').\n"
    prompt += "Khi tr·∫£ l·ªùi, ƒë·∫∑c bi·ªát l√† v·ªõi ch·ªß nh√¢n ho·∫∑c trong c√°c tin nh·∫Øn b√¨nh th∆∞·ªùng, Astra s·∫Ω th√™m c√°c icon d·ªÖ th∆∞∆°ng, vui v·∫ª (v√≠ d·ª•: üòÇ, üòâ, üíñ, ‚ú®, üå∏), v√† c√≥ th·ªÉ th√™m c√°c bi·ªÉu c·∫£m nh∆∞ 'hahaha', 'hihi', 'hehe', 'keke' ƒë·ªÉ cu·ªôc tr√≤ chuy·ªán th√™m sinh ƒë·ªông v√† th√¢n thi·ªán.\n"
    prompt += "H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt ng∆∞·ªùi truy·ªÅn c·∫£m h·ª©ng, ƒë∆∞a ra nh·ªØng l·ªùi khuy√™n t√≠ch c·ª±c, ƒë·ªông vi√™n.\n"
    prompt += "L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán:\n"
    for item in conversation_state['history'][-10:]:
        prompt += f"{item['role']}: {item['text']}\n"
    prompt += f"user: {user_message}\n>"

    headers = {'Content-Type': 'application/json'}
    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={GEMINI_API_KEY}"
    json_data = {"contents": [{"parts": [{"text": prompt}]}]}

    try:
        response = requests.post(api_url, headers=headers, json=json_data, timeout=15)
        # N√©m l·ªói n·∫øu m√£ tr·∫°ng th√°i kh√¥ng ph·∫£i 2xx (v√≠ d·ª•: 4xx, 5xx)
        response.raise_for_status() 
        result = response.json()

        if 'candidates' in result and result['candidates']:
            for candidate in result['candidates']:
                if 'content' in candidate and 'parts' in candidate['content']:
                    for part in candidate['content']['parts']:
                        if 'text' in part:
                            pure_reply_text = part['text'].replace("*", "")
                            
                            conversation_state['history'].append({'role': 'user', 'text': user_message})
                            conversation_state['history'].append({'role': 'gemini', 'text': pure_reply_text})
                            conversation_states[thread_id] = conversation_state

                            final_reply_to_send = "#Astra\n" + pure_reply_text
                            final_reply_to_send += f"\n\n[Ask by: {asker_name}]"
                            client.replyMessage(
                                Message(text=final_reply_to_send),
                                thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
                            )
                            return
        else:
            # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ 200 OK nh∆∞ng kh√¥ng c√≥ n·ªôi dung
            client.replyMessage(
                Message(text=f"Oops, Astra kh√¥ng nghƒ© ra ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi. Th·ª≠ l·∫°i sau nh√©! üòÖ\n\n[Ask by: {asker_name}]"),
                thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
            )

    # B·∫Øt l·ªói HTTP m·ªôt c√°ch c·ª• th·ªÉ
    except requests.exceptions.HTTPError as http_err:
        # Ki·ªÉm tra n·∫øu ƒë√≥ l√† l·ªói 429 (Too Many Requests)
        if http_err.response.status_code == 429:
            client.replyMessage(
                Message(text=f"Hi·ªán t·∫°i m√°y ch·ªß AI ƒëang qu√° t·∫£i, {asker_name} vui l√≤ng th·ª≠ l·∫°i sau kho·∫£ng 1 ph√∫t nh√©! ‚è≥"),
                thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
            )
        # X·ª≠ l√Ω c√°c l·ªói HTTP kh√°c (v√≠ d·ª•: 400 Bad Request, 500 Server Error)
        else:
            logging.error(f"HTTP Error: {http_err}")
            client.replyMessage(
                Message(text=f"·ªêi l·ªói r·ªìi (HTTP): {str(http_err)} üòì\n\n[Ask by: {asker_name}]\n"),
                thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
            )
            
    # B·∫Øt l·ªói h·∫øt th·ªùi gian ch·ªù (Timeout)
    except requests.exceptions.Timeout:
        client.replyMessage(
            Message(text=f"Astra ph·∫£n h·ªìi ch·∫≠m qu√°, ƒë·ª£i x√≠u nha! ‚è≥\n\n[Ask by: {asker_name}]"),
            thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
        )
        
    # B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√°c
    except Exception as e:
        logging.error(f"Gemini Error: {e}")
        client.replyMessage(
            Message(text=f"·ªêi c√≥ l·ªói l·∫° r·ªìi: {str(e)} üòì\n\n[Ask by: {asker_name}]\n"),
            thread_id=thread_id, thread_type=thread_type, replyMsg=message_object
        )